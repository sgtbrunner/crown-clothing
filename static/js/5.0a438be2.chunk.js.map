{"version":3,"sources":["redux/shop/shop.selectors.js","components/with-spinner/with-spinner.component.jsx","components/collection-item/collection-item.component.jsx","pages/collection/collection.page.jsx","pages/collection/collection.container.jsx"],"names":["selectShop","state","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","values","selectCollection","collectionUrlParam","selectIsCollecionLoaded","isFetching","withSpinner","WrappedComponent","isLoading","otherProps","connect","dispatch","addItem","item","name","imageUrl","price","className","style","backgroundImage","inverted","onClick","ownProps","collection","match","params","collectionId","title","items","toUpperCase","map","key","id","mapStateToProps","createStructuredSelector","CollectionPageContainer","compose","CollectionPage"],"mappings":"uHAAA,iHAEMA,EAAa,SAACC,GAAD,OAAWA,EAAMC,MAEvBC,EAAoBC,YAC/B,CAACJ,IACD,SAACE,GAAD,OAAUA,EAAKG,eAGJC,EAA8BF,YACzC,CAACD,IACD,SAACE,GAAD,OAAkBA,EAAcE,OAAOC,OAAOH,GAAe,MAGlDI,EAAmB,SAACC,GAAD,OAC9BN,YAAe,CAACD,IAAoB,SAACE,GAAD,OAClCA,EAAcA,EAAYK,GAAsB,SAQvCC,GAL6BP,YACxC,CAACJ,IACD,SAACE,GAAD,OAAUA,EAAKU,cAGsBR,YACrC,CAACJ,IACD,SAACE,GAAD,QAAYA,EAAKG,iB,oEClBJQ,IAJK,SAACC,GAAD,OAAsB,YAAmC,IAAhCC,EAA+B,EAA/BA,UAAcC,EAAiB,6BAC1E,OAAOD,EAAY,kBAAC,IAAD,MAAc,kBAACD,EAAqBE,M,gCCLzD,kDAgCeC,gBAAQ,MAJI,SAACC,GAAD,MAAe,CACxCC,QAAS,SAACC,GAAD,OAAUF,EAASC,YAAQC,QAGvBH,EAzBQ,SAAC,GAAuB,IAArBG,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QACtBE,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACxB,OACE,yBAAKC,UAAU,mBACb,yBACEA,UAAU,QACVC,MAAO,CACLC,gBAAgB,OAAD,OAASJ,EAAT,QAGnB,yBAAKE,UAAU,qBACb,0BAAMA,UAAU,QAAQH,GACxB,yCAAWE,KAEb,kBAAC,IAAD,CAAcI,UAAQ,EAACC,QAAS,kBAAMT,EAAQC,KAA9C,oB,oJCMSH,G,MAAAA,aAJS,SAAChB,EAAO4B,GAAR,MAAsB,CAC5CC,WAAYrB,YAAiBoB,EAASE,MAAMC,OAAOC,aAAvCxB,CAAqDR,MAGpDgB,EAlBQ,SAAC,GAAoB,IAAlBa,EAAiB,EAAjBA,WAChBI,EAAiBJ,EAAjBI,MAAOC,EAAUL,EAAVK,MACf,OACE,yBAAKX,UAAU,mBACb,wBAAIA,UAAU,SAASU,EAAME,eAC7B,yBAAKZ,UAAU,SACZW,EAAME,KAAI,SAACjB,GAAD,OACT,kBAAC,IAAD,CAAgBkB,IAAKlB,EAAKmB,GAAInB,KAAMA,aCRxCoB,EAAkBC,YAAyB,CAC/C1B,UAAW,SAACd,GAAD,OAAYU,YAAwBV,MAG3CyC,EAA0BC,YAC9B1B,YAAQuB,GACR3B,IAF8B8B,CAG9BC,GAEaF","file":"static/js/5.0a438be2.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectShop = (state) => state.shop;\n\nexport const selectCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n  [selectCollections],\n  (collections) => (collections ? Object.values(collections) : [])\n);\n\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectCollections], (collections) =>\n    collections ? collections[collectionUrlParam] : null\n  );\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  (shop) => shop.isFetching\n);\n\nexport const selectIsCollecionLoaded = createSelector(\n  [selectShop],\n  (shop) => !!shop.collections\n);\n","import React from 'react';\n\nimport Spinner from '../spinner/spinner.component';\n\nconst withSpinner = (WrappedComponent) => ({ isLoading, ...otherProps }) => {\n  return isLoading ? <Spinner /> : <WrappedComponent {...otherProps} />;\n};\n\nexport default withSpinner;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addItem } from '../../redux/cart/cart.actions';\nimport CustomButton from '../custom-button/custom-button.component';\nimport './collection-item.styles.scss';\n\nconst CollectionItem = ({ item, addItem }) => {\n  const { name, imageUrl, price } = item;\n  return (\n    <div className=\"collection-item\">\n      <div\n        className=\"image\"\n        style={{\n          backgroundImage: `url(${imageUrl})`,\n        }}\n      />\n      <div className=\"collection-footer\">\n        <span className=\"name\">{name}</span>\n        <span>{`$${price}`}</span>\n      </div>\n      <CustomButton inverted onClick={() => addItem(item)}>\n        Add to Cart\n      </CustomButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addItem: (item) => dispatch(addItem(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { selectCollection } from '../../redux/shop/shop.selectors';\n\nimport CollectionItem from '../../components/collection-item/collection-item.component';\n\nimport './collection.styles.scss';\n\nconst CollectionPage = ({ collection }) => {\n  const { title, items } = collection;\n  return (\n    <div className=\"collection-page\">\n      <h2 className=\"title\">{title.toUpperCase()}</h2>\n      <div className=\"items\">\n        {items.map((item) => (\n          <CollectionItem key={item.id} item={item} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  collection: selectCollection(ownProps.match.params.collectionId)(state),\n});\n\nexport default connect(mapStateToProps)(CollectionPage);\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { selectIsCollecionLoaded } from '../../redux/shop/shop.selectors';\nimport withSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionPage from './collection.page';\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: (state) => !selectIsCollecionLoaded(state),\n});\n\nconst CollectionPageContainer = compose(\n  connect(mapStateToProps),\n  withSpinner\n)(CollectionPage);\n\nexport default CollectionPageContainer;\n"],"sourceRoot":""}