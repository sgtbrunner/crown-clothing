{"version":3,"sources":["redux/shop/shop.actions.js","pages/shop/shop.styles.js","pages/shop/shop.page.jsx"],"names":["fetchCollectionsStartAsync","dispatch","collectionRef","firestore","collection","type","shopActionTypes","FETCH_COLLECTIONS_START","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsSuccess","catch","error","errorMessage","message","FETCH_COLLECTIONS_FAILURE","ShopPageContainer","styled","div","CollectionPageContainer","lazy","CollectionsOverviewContainer","connect","match","useEffect","fallback","exact","path","component"],"mappings":"mLAqBaA,EAA6B,WACxC,OAAO,SAACC,GACN,IAAMC,EAAgBC,IAAUC,WAAW,eAC3CH,EAjBwC,CAC1CI,KAAMC,IAAgBC,0BAkBpBL,EACGM,MACAC,MAAK,SAACC,GACL,IAAMC,EAAiBC,YAAgCF,GACvDT,EAnB+B,SAACU,GAAD,MAAqB,CAC1DN,KAAMC,IAAgBO,0BACtBC,QAASH,GAiBMI,CAAwBJ,OAElCK,OAAM,SAACC,GAAD,OAAWhB,GAhBeiB,EAgBiBD,EAAME,QAhBL,CACvDd,KAAMC,IAAgBc,0BACtBN,QAASI,KAF2B,IAACA,O,eCd1BG,E,KAAoBC,EAAOC,IAAV,4CCSxBC,EAA0BC,gBAAK,kBACnC,gCAEIC,EAA+BD,gBAAK,kBACxC,gCAkCaE,sBAAQ,MATI,SAAC1B,GAAD,MAAe,CACxCD,2BAA4B,kBAAMC,EAASD,SAQ9B2B,EA/BE,SAAC,GAA2C,IAAzC3B,EAAwC,EAAxCA,2BAA4B4B,EAAY,EAAZA,MAK9C,OAJAC,qBAAU,WACR7B,MACC,CAACA,IAGF,kBAACqB,EAAD,KACE,kBAAC,WAAD,CAAUS,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAI,UAAKJ,EAAMI,MACfC,UAAWP,IAEb,kBAAC,IAAD,CACEM,KAAI,UAAKJ,EAAMI,KAAX,kBACJC,UAAWT","file":"static/js/8.ad78c9d4.chunk.js","sourcesContent":["import shopActionTypes from './shop.types';\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from '../../utils/firebase.utils';\n\nexport const fetchCollectionsStart = () => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\n\nexport const fetchCollectionFailure = (errorMessage) => ({\n  type: shopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n\n    collectionRef\n      .get()\n      .then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch((error) => dispatch(fetchCollectionFailure(error.message)));\n  };\n};\n","import styled from 'styled-components';\n\nexport const ShopPageContainer = styled.div`\n  width: 100%;\n`;\n","import React, { useEffect, lazy, Suspense } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\n\nimport Spinner from '../../components/spinner/spinner.component';\n\nimport { ShopPageContainer } from './shop.styles';\n\nconst CollectionPageContainer = lazy(() =>\n  import('../collection/collection.container')\n);\nconst CollectionsOverviewContainer = lazy(() =>\n  import('../../components/collections-overview/collections-overview.container')\n);\n\nconst ShopPage = ({ fetchCollectionsStartAsync, match }) => {\n  useEffect(() => {\n    fetchCollectionsStartAsync();\n  }, [fetchCollectionsStartAsync]);\n\n  return (\n    <ShopPageContainer>\n      <Suspense fallback={<Spinner />}>\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionsOverviewContainer}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          component={CollectionPageContainer}\n        />\n      </Suspense>\n    </ShopPageContainer>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\n});\n\nShopPage.propTypes = {\n  fetchCollectionsStartAsync: PropTypes.func.isRequired,\n  match: PropTypes.object.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"],"sourceRoot":""}